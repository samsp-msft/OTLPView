@inject TracesPageState state
@using OTLPView.DataModel;

<div class="SpanBlock">
    <div class="TimelineBlock" @onclick="UpdateSelection">
        <div class="TimelineMiddle" style='@($"width:{_width.ToString("F2")}%; margin-left:{_leftOffset:F2}%; margin-right:{_rightOffset:F2}%; background-color:{BarColor};")'>
            @foreach (var e in Span.Events)
            {
                <div class="TimelineEvent" style='@($"left:{(e.TimeOffset(Span))/Span.Duration.TotalMilliseconds * 100:F2}%")'>&#9830;</div>
            }
            <span class="TimelineOffsetText">@($"{_left_ms:F0} ms")</span>
            <span class="TimelineTitle">@($"{Span.ScopeName}: {Span.Name}")</span>
            <span class="TimelineDurationText">@($"{Span.Duration.TotalMilliseconds:F0} ms")</span>
        </div>
    </div>
    <div class="ChildSpans">


        @foreach (var s in Span.ChildSpans)
        {
            <TraceSpanView Span="@s" />
        }
    </div>
</div>


@code {
    private TraceSpan _span;

    [Parameter]
    public TraceSpan Span
    {
        get { return _span; }
        set
        {
            _span = value;
            calculateOffsets();
        }
    }

    private double _leftOffset;
    private double _width;
    private double _rightOffset;
    private double _left_ms;

    private void calculateOffsets()
    {
        if (Span.ParentSpan != null)
        {
            var rootDuration = Span.RootSpan.Duration.TotalMilliseconds;
            _leftOffset = (Span.StartTime - Span.RootSpan.StartTime).TotalMilliseconds / rootDuration * 100;
            _width = (Span.EndTime - Span.StartTime).TotalMilliseconds / rootDuration * 100;
            _rightOffset = 100 - _leftOffset - _width;
            _left_ms = (Span.StartTime - Span.RootSpan.StartTime).TotalMilliseconds;
        }
        else
        {
            _leftOffset = _rightOffset = 0;
            _width = 100;
        }
    }

        private void UpdateSelection() => state.SelectedSpan = Span;

        string BarColor => (state.SelectedSpan == Span) ? "#4D5788" : Span.TraceScope.BarColor;
}
